package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type AutoGenerated struct {
	Context struct {
		Kg                  string `json:"kg"`
		DetailedDescription string `json:"detailedDescription"`
		ResultScore         string `json:"resultScore"`
		Goog                string `json:"goog"`
		EntitySearchResult  string `json:"EntitySearchResult"`
		Vocab               string `json:"@vocab"`
	} `json:"@context"`
	Type            string `json:"@type"`
	ItemListElement []struct {
		Result struct {
			DetailedDescription struct {
				URL         string `json:"url"`
				ArticleBody string `json:"articleBody"`
				License     string `json:"license"`
			} `json:"detailedDescription"`
			URL   string `json:"url"`
			ID    string `json:"@id"`
			Image struct {
				ContentURL string `json:"contentUrl"`
				URL        string `json:"url"`
			} `json:"image"`
			Name        string   `json:"name"`
			Type        []string `json:"@type"`
			Description string   `json:"description"`
		} `json:"result,omitempty"`
		ResultScore float64 `json:"resultScore"`
		Type        string  `json:"@type"`
		Result      struct {
			DetailedDescription struct {
				License     string `json:"license"`
				URL         string `json:"url"`
				ArticleBody string `json:"articleBody"`
			} `json:"detailedDescription"`
			ID          string   `json:"@id"`
			Type        []string `json:"@type"`
			Name        string   `json:"name"`
			Description string   `json:"description"`
		} `json:"result,omitempty"`
		Result struct {
			Type                []string `json:"@type"`
			Name                string   `json:"name"`
			DetailedDescription struct {
				URL         string `json:"url"`
				ArticleBody string `json:"articleBody"`
				License     string `json:"license"`
			} `json:"detailedDescription"`
			ID string `json:"@id"`
		} `json:"result,omitempty"`
		Result struct {
			Name                string `json:"name"`
			DetailedDescription struct {
				URL         string `json:"url"`
				ArticleBody string `json:"articleBody"`
				License     string `json:"license"`
			} `json:"detailedDescription"`
			ID   string   `json:"@id"`
			Type []string `json:"@type"`
		} `json:"result,omitempty"`
		Result struct {
			Name        string   `json:"name"`
			Description string   `json:"description"`
			ID          string   `json:"@id"`
			Type        []string `json:"@type"`
		} `json:"result,omitempty"`
	} `json:"itemListElement"`
}

func print_json(w http.ResponseWriter, r *http.Request) {
	resp, _ := http.Get("https://kgsearch.googleapis.com/v1/entities:search?query=Pavarotti&key=AIzaSyDeq1V9-9yZvHZhr_ArgQ2eARTv3vrlE5c&limit=1&indent=True")
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	data := new(AutoGenerated)
	json.Unmarshal(body, &data)

	fmt.Println(data.ItemListElement)
	//imprimir(&data)
}

func main() {

	http.HandleFunc("/json", print_json)
	err := http.ListenAndServe("localhost:8080", nil)

	if err != nil {
		return
	}
}
